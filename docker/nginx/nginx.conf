# 実行ユーザを指定
user  nginx;

# 実行プロセス数を指定
worker_processes  auto;

# エラーログの出力先とレベルを指定
error_log  /var/log/nginx/error.log warn;

# プロセスIDを保存するファイルを指定
pid        /var/run/nginx.pid;

# イベント処理に関するモジュールの設定
events {
  # 1ワーカーの接続数
  worker_connections  1024;

  # 複数のリクエストを同時に受け付けるか
    multi_accept on;

    # 複数アクセスをさばくため、I/O多重化に使うシステムコールを指定
    ## epollは計算量が少なく、また監視対象のファイルディスクリプタの数が無制限
    use epoll;
}

# httpに関するモジュールの設定
http {
  # MIMEタイプの指定
  ## nginxがデフォルトで用意するMIMEタイプと拡張子のマッピングファイル
  include       /etc/nginx/mime.types;

  ## マッピングにない拡張子のdefault
  ### application/octet-streamはファイルの種類は気にするなの意味
  default_type  application/octet-stream;

  # ログのフォーマットに名前を付ける
    log_format log_ltsv 'domain:$host\t'
                        'host:$remote_addr\t'
                        'user:$remote_user\t'
                        'time:$time_local\t'
                        'method:$request_method\t'
                        'path:$request_uri\t'
                        'status:$status\t'
                        'size:$body_bytes_sent\t'
                        'referer:$http_referer\t'
                        'agent:$http_user_agent\t'
                        'x_forwarded_for:$http_x_forwarded_for\t'
                        'set_cookie:$sent_http_set_cookie\t'
                        'upstream_addr:$upstream_addr\t'
                        'upstream_cache_status:$upstream_cache_status\t'
                        'upstream_response_time:$upstream_response_time';

  # アクセスログの出力先とフォーマットを指定
  access_log  /var/log/nginx/access.log  log_ltsv;

  # カーネルのsendfileを使用。ハードディスクio処理とsocket-io処理のバランスを取る
  sendfile on;

  # レスポンスヘッダとファイルの内容をまとめて送る
  tcp_nopush on;

  # TCPパケットの容量がいっぱいになるのを待たずに送る
  tcp_nodelay on;

  # エラー画面の時にNginxのバージョンを表示しない
  server_tokens off;

  # HTTPの接続時間
  keepalive_timeout  60;

  # クライアントリクエストボディの最大サイズ
  client_max_body_size 15m;

  # クライアントリクエストボディの読み取りの最大時間
  client_body_timeout 60;

  # クライアントリクエストボディの読み取りのバッファサイズ
  client_body_buffer_size 16K;

  # クライアントのリクエストヘッダーの読み取りのバッファサイズ
  client_header_buffer_size 32k;

  # 大きなクライアントリクエストヘッダを読み込むのに使われるバッファの数とサイズの最大値
  large_client_header_buffers 4 32k;

  # クライアントに応答する転送タイムアウト
  send_timeout 10;

  # クライアントリクエストヘッダーの読み取りの最大時間
  client_header_timeout 60;

  # 非アクティブクライアントのコネクションをクローズする
  reset_timedout_connection on;

  upstream php-fpm {
    server {UPSTREAM_NAME}:{FPM_PORT};
  }

  # 仮想サーバーの設定
  server {
    # ポートを設定
    ## default_serverを指定すると想定外のアクセスが来てもこのserverブロックで処理する
    listen 80 default_server;

    charset utf-8;

    # gzip圧縮する
    gzip on;

    # gzip圧縮する対象のファイルを指定する
    gzip_types application/json;

    # Vary: Accept-Encoding をレスポンスヘッダに付加する
    gzip_vary on;


    # リクエストのルートディレクトリ
    root /var/www/html/public;

    # エラーログの出力先
    error_log /var/log/nginx/error.log;

    index index.php index.html;

    # location /は先頭が/で始まるURIで一致。(全リクエストに一致)
    # try_filesは以降に指定した順番に存在をチェックし、存在すればそれが処理される
    # http://localhost:8000/index.php なら、 index.phpを返す
    # ファイルが無かったら、次に$uri/なので、index.php/を探して、そこのファイルを返す
    # それでもなければ、index.phpを無条件で返す
    location / {
      try_files $uri $uri/ /index.php?$query_string;
    }

    location = /favicon.ico {
      access_log off;
      log_not_found off;
    }

    location = /robots.txt  {
      access_log off;
      log_not_found off;
    }

    #  基本的に location / の結果としてindex.phpになって内部リダイレクトされている前提。
    #  index.phpで内部リダイレクトされるので、location ~ \.php$ にマッチ。
    #  あとは、location ~ \.php$の設定に従い、php-fpmを経由してLaravelの開始スクリプトのindex.phpが実行される。
    location ~ \.php$ {
      # ファイルが見つからなければ404を返す
      try_files $uri =404;

      # $fastcgi_script_name, $fastcgi_path_info 変数に入れる値を正規表現で指定
      fastcgi_split_path_info ^(.+\.php)(/.+)$;

      # FastCGIサーバーのアドレスを指定
      fastcgi_pass php-fpm;

      # インデックスのファイル名を指定
      fastcgi_index index.php;

      # FastCGIの設定ファイルを読み込む
      include fastcgi_params;

      # FastCGIの設定を追加
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      fastcgi_param PATH_INFO $fastcgi_path_info;
    }
  }
}
